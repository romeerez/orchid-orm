import {
  expectSql,
  getDb,
  makeTestUpAndDown,
  queryMock,
  resetDb,
  toLine,
} from '../rake-db.test-utils';
import { asMock } from 'test-utils';

const db = getDb();

const testUpAndDown = async (
  fn: () => Promise<void>,
  expectUp: () => void,
  expectDown: () => void,
) => {
  resetDb(true);
  await fn();
  expectUp();

  resetDb(false);
  await fn();
  expectDown();
};

describe('changeTable', () => {
  beforeEach(() => {
    db.options.snakeCase = false;
  });

  it('should work for table with schema', async () => {
    await testUpAndDown(
      () =>
        db.changeTable('schema.table', (t) => ({
          id: t.identity().primaryKey(),
        })),
      () =>
        expectSql(`
          ALTER TABLE "schema"."table"
            ADD COLUMN "id" int4 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
        `),
      () =>
        expectSql(`
          ALTER TABLE "schema"."table"
            DROP COLUMN "id"
        `),
    );
  });

  it('should set table comment', async () => {
    await testUpAndDown(
      () => db.changeTable('table', { comment: 'comment' }),
      () => expectSql(`COMMENT ON TABLE "table" IS 'comment'`),
      () => expectSql(`COMMENT ON TABLE "table" IS NULL`),
    );
  });

  it('should change table comment', async () => {
    await testUpAndDown(
      () => db.changeTable('table', { comment: ['old', 'new'] }),
      () => expectSql(`COMMENT ON TABLE "table" IS 'new'`),
      () => expectSql(`COMMENT ON TABLE "table" IS 'old'`),
    );
  });

  describe('add and drop', () => {
    const testUpAndDown = makeTestUpAndDown('add', 'drop');

    describe('column', () => {
      it('should handle primary key column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              id: t[action](t.identity().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "id" int4 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "id"
            `),
        );
      });

      it('should add DEFAULT gen_random_uuid() for uuid primary key', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              id: t[action](t.uuid().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "id" uuid PRIMARY KEY DEFAULT gen_random_uuid()
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "id"
            `),
        );
      });

      it('should not add DEFAULT to uuid primary key if user specifies default(null)', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              id: t[action](t.uuid().primaryKey().default(null)),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "id" uuid PRIMARY KEY
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "id"
            `),
        );
      });

      it('should not add DEFAULT if the provided default is a function', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              id: t[action](
                t
                  .uuid()
                  .primaryKey()
                  .default(() => '123'),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "id" uuid PRIMARY KEY
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "id"
            `),
        );
      });

      it('should add identity column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              id: t[action](t.identity().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "id" int4 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "id"
            `),
        );
      });

      it('should handle column with custom name', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnKey: t.name('name')[action](t.text()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "name" text NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "name"
            `),
        );
      });

      it('should handle column with custom name on column itself', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnKey: t[action](t.name('name').text()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "name" text NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "name"
            `),
        );
      });

      it('should handle column with drop cascade', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              dropCascade: t[action](t.text(), { dropMode: 'CASCADE' }),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "dropCascade" text NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "dropCascade" CASCADE
            `),
        );
      });

      it('should handle nullable column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              nullable: t[action](t.text().nullable()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "nullable" text
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "nullable"
            `),
        );
      });

      it('should handle non nullable column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              nonNullable: t[action](t.text()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "nonNullable" text NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "nonNullable"
            `),
        );
      });

      it('should handle column with default', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              withDefault: t[action](t.boolean().default(false)),
              jsonWithDefault: t[action](t.json().default([])),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "withDefault" bool NOT NULL DEFAULT false,
                ADD COLUMN "jsonWithDefault" jsonb NOT NULL DEFAULT '[]'
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "withDefault",
                DROP COLUMN "jsonWithDefault"
            `),
        );
      });

      it('should handle column with raw default', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              withDefaultRaw: t[action](t.date().default(t.sql(`now()`))),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "withDefaultRaw" date NOT NULL DEFAULT now()
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "withDefaultRaw"
            `),
        );
      });

      it('should handle varchar with length', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              varcharWithLength: t[action](t.varchar(20)),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "varcharWithLength" varchar(20) NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "varcharWithLength"
            `),
        );
      });

      it('should handle decimal with precision and scale', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              decimalWithPrecisionAndScale: t[action](t.decimal(10, 5)),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "decimalWithPrecisionAndScale" numeric(10, 5) NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "decimalWithPrecisionAndScale"
            `),
        );
      });

      it('should handle column with compression', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnWithCompression: t[action](
                t.text().compression('compression'),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "columnWithCompression" text COMPRESSION compression NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "columnWithCompression"
            `),
        );
      });

      it('should handle column with collate', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnWithCollate: t[action](
                t.text().collate('schema.collation'),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "columnWithCollate" text COLLATE "schema"."collation" NOT NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "columnWithCollate"
            `),
        );
      });

      it('should add and drop the same column with ... syntax', async () => {
        const fn = () =>
          db.changeTable('table', (t) => ({
            ...t.drop(t.name('column').text()),
            ...t.add(t.name('column').integer()),
          }));

        resetDb(true);
        await fn();
        expectSql(`
          ALTER TABLE "table"
            DROP COLUMN "column",
            ADD COLUMN "column" int4 NOT NULL
        `);

        resetDb(false);
        await fn();
        expectSql(`
          ALTER TABLE "table"
            DROP COLUMN "column",
            ADD COLUMN "column" text NOT NULL
        `);
      });
    });

    describe('foreign key', () => {
      it('should handle column with foreign key', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnWithForeignKey: t[action](
                t.integer().foreignKey('table', 'column', {
                  name: 'fkeyConstraint',
                  match: 'FULL',
                  onUpdate: 'CASCADE',
                  onDelete: 'CASCADE',
                }),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "columnWithForeignKey" int4 NOT NULL CONSTRAINT "fkeyConstraint" REFERENCES "table"("column") MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "columnWithForeignKey"
            `),
        );
      });

      it('should handle column with foreign key in snakeCase mode', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', { snakeCase: true }, (t) => ({
              columnWithForeignKey: t[action](
                t.integer().foreignKey('table', 'columnName'),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "column_with_foreign_key" int4 NOT NULL REFERENCES "table"("column_name")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "column_with_foreign_key"
            `),
        );
      });
    });

    describe('timestamps', () => {
      it('should handle timestamps', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.timestamps()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "createdAt" timestamp with time zone NOT NULL DEFAULT now(),
                ADD COLUMN "updatedAt" timestamp with time zone NOT NULL DEFAULT now()
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "createdAt",
                DROP COLUMN "updatedAt"
            `),
        );
      });

      it('should handle timestamps in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.timestamps()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "created_at" timestamp with time zone NOT NULL DEFAULT now(),
                ADD COLUMN "updated_at" timestamp with time zone NOT NULL DEFAULT now()
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "created_at",
                DROP COLUMN "updated_at"
            `),
        );
      });
    });

    describe('index', () => {
      it('should handle index', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              withIndex: t[action](
                t.text().index({
                  name: 'indexName',
                  unique: true,
                  nullsNotDistinct: true,
                  using: 'gin',
                  collate: 'schema.collation',
                  opclass: 'opclass',
                  order: 'ASC',
                  include: 'id',
                  with: 'fillfactor = 70',
                  tablespace: 'tablespace',
                  where: 'column = 123',
                }),
              ),
            })),
          () =>
            expectSql([
              `ALTER TABLE "table"
                ADD COLUMN "withIndex" text NOT NULL`,
              toLine(`
                CREATE UNIQUE INDEX "indexName"
                  ON "table"
                  USING gin ("withIndex" COLLATE "schema"."collation" opclass ASC)
                  INCLUDE ("id")
                  NULLS NOT DISTINCT
                  WITH (fillfactor = 70)
                  TABLESPACE tablespace
                  WHERE column = 123
              `),
            ]),
          () =>
            expectSql([
              `ALTER TABLE "table"
                DROP COLUMN "withIndex"`,
              // index is dropped automatically with the column
            ]),
        );
      });

      it('should handle unique index', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              uniqueColumn: t[action](
                t
                  .text()
                  .unique({ dropMode: 'CASCADE', nullsNotDistinct: true }),
              ),
            })),
          () =>
            expectSql([
              `ALTER TABLE "table"
              ADD COLUMN "uniqueColumn" text NOT NULL`,
              toLine(`
            CREATE UNIQUE INDEX "table_uniqueColumn_idx"
              ON "table" ("uniqueColumn") NULLS NOT DISTINCT
          `),
            ]),
          () =>
            expectSql([
              `ALTER TABLE "table"
              DROP COLUMN "uniqueColumn"`,
            ]),
        );
      });

      it('should handle index in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              withIndex: t[action](t.text().index()),
            })),
          () =>
            expectSql([
              `ALTER TABLE "table"
                ADD COLUMN "with_index" text NOT NULL`,
              toLine(`
                CREATE INDEX "table_with_index_idx" ON "table" ("with_index")
              `),
            ]),
          () =>
            expectSql([
              `ALTER TABLE "table"
                DROP COLUMN "with_index"`,
            ]),
        );
      });
    });

    describe('column comment', () => {
      it('should handle column comment', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnWithComment: t[action](
                t.text().comment('this is a column comment'),
              ),
            })),
          () =>
            expectSql([
              `ALTER TABLE "table"
            ADD COLUMN "columnWithComment" text NOT NULL`,
              `COMMENT ON COLUMN "table"."columnWithComment" IS 'this is a column comment'`,
            ]),
          () =>
            expectSql(
              `ALTER TABLE "table"
            DROP COLUMN "columnWithComment"`,
            ),
        );
      });

      it('should handle column comment in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              columnWithComment: t[action](
                t.text().comment('this is a column comment'),
              ),
            })),
          () =>
            expectSql([
              `ALTER TABLE "table"
              ADD COLUMN "column_with_comment" text NOT NULL`,
              `COMMENT ON COLUMN "table"."column_with_comment" IS 'this is a column comment'`,
            ]),
          () =>
            expectSql(
              `ALTER TABLE "table"
              DROP COLUMN "column_with_comment"`,
            ),
        );
      });
    });

    it('should handle enum', async () => {
      await testUpAndDown(
        async (action) => {
          asMock(queryMock).mockResolvedValue({ rows: [['one'], ['two']] });

          await db.changeTable('table', (t) => ({
            enum: t[action](t.enum('mood')),
          }));
        },
        () => {
          expectSql([
            'SELECT unnest(enum_range(NULL::"mood"))::text',
            `
              ALTER TABLE "table"
                ADD COLUMN "enum" "mood" NOT NULL
            `,
          ]);
        },
        () => {
          expectSql([
            'SELECT unnest(enum_range(NULL::"mood"))::text',
            `
              ALTER TABLE "table"
                DROP COLUMN "enum"
            `,
          ]);
        },
      );
    });

    it('should handle custom column type', async () => {
      await testUpAndDown(
        (action) =>
          db.changeTable('table', (t) => ({
            column: t[action](t.type('schema.type')),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ADD COLUMN "column" "schema"."type" NOT NULL
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              DROP COLUMN "column"
          `),
      );
    });

    it('should handle domain column', async () => {
      await testUpAndDown(
        (action) =>
          db.changeTable('table', (t) => ({
            column: t[action](t.domain('domainName')),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ADD COLUMN "column" "domainName" NOT NULL
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              DROP COLUMN "column"
          `),
      );
    });

    describe('primary key', () => {
      it('should handle columns with a primary key', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              id: t[action](t.integer().primaryKey()),
              text: t[action](t.text().primaryKey()),
              active: t[action](t.boolean().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD COLUMN "id" int4 NOT NULL,
              ADD COLUMN "text" text NOT NULL,
              ADD COLUMN "active" bool NOT NULL,
              ADD PRIMARY KEY ("id", "text", "active")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey",
              DROP COLUMN "id",
              DROP COLUMN "text",
              DROP COLUMN "active"
            `),
        );
      });

      it('should handle composite primary key', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.primaryKey(['id', 'name'])),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD PRIMARY KEY ("id", "name")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey"
            `),
        );
      });

      it('should handle composite primary key with constraint name', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.primaryKey(['id', 'name'], { name: 'primaryKeyName' }),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD CONSTRAINT "primaryKeyName" PRIMARY KEY ("id", "name")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "primaryKeyName"
            `),
        );
      });

      it('should handle primary key defined on table and on columns in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              idColumn: t[action](t.integer().primaryKey()),
              textColumn: t[action](t.text().primaryKey()),
              activeColumn: t[action](t.boolean().primaryKey()),
              anotherColumn: t[action](t.date()),
              oneColumn: t[action](t.decimal()),
              ...t[action](t.primaryKey(['anotherColumn', 'oneColumn'])),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD COLUMN "id_column" int4 NOT NULL,
              ADD COLUMN "text_column" text NOT NULL,
              ADD COLUMN "active_column" bool NOT NULL,
              ADD COLUMN "another_column" date NOT NULL,
              ADD COLUMN "one_column" numeric NOT NULL,
              ADD PRIMARY KEY ("id_column", "text_column", "active_column", "another_column", "one_column")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey",
              DROP COLUMN "id_column",
              DROP COLUMN "text_column",
              DROP COLUMN "active_column",
              DROP COLUMN "another_column",
              DROP COLUMN "one_column"
            `),
        );
      });
    });

    describe('index', () => {
      it('should handle composite index', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.index(['id', { column: 'name', order: 'DESC' }], {
                  name: 'compositeIndexOnTable',
                  dropMode: 'CASCADE',
                }),
              ),
            })),
          () =>
            expectSql(`
              CREATE INDEX "compositeIndexOnTable" ON "table" ("id", "name" DESC)
            `),
          () =>
            expectSql(`
              DROP INDEX "compositeIndexOnTable" CASCADE
            `),
        );
      });

      it('should handle composite unique index', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.unique(['id', { column: 'name', order: 'DESC' }], {
                  name: 'compositeIndexOnTable',
                  nullsNotDistinct: true,
                  dropMode: 'CASCADE',
                }),
              ),
            })),
          () =>
            expectSql(
              toLine(`
              CREATE UNIQUE INDEX "compositeIndexOnTable"
                ON "table" ("id", "name" DESC) NULLS NOT DISTINCT
            `),
            ),
          () =>
            expectSql(`
              DROP INDEX "compositeIndexOnTable" CASCADE
            `),
        );
      });

      it('should handle composite index and unique index in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.index(['idColumn', { column: 'nameColumn', order: 'DESC' }]),
              ),
              ...t[action](
                t.unique(
                  [
                    'idColumn',
                    {
                      column: 'nameColumn',
                      order: 'DESC',
                    },
                  ],
                  {
                    nullsNotDistinct: true,
                  },
                ),
              ),
            })),
          () =>
            expectSql([
              `
                CREATE INDEX "table_id_column_name_column_idx" ON "table" ("id_column", "name_column" DESC)
              `,
              toLine(`
                CREATE UNIQUE INDEX "table_id_column_name_column_idx"
                  ON "table" ("id_column", "name_column" DESC) NULLS NOT DISTINCT
              `),
            ]),
          () =>
            expectSql([
              `
                DROP INDEX "table_id_column_name_column_idx"
              `,
              `
                DROP INDEX "table_id_column_name_column_idx"
              `,
            ]),
        );
      });
    });

    describe('search index', () => {
      beforeEach(() => {
        delete db.options.language;
      });

      it('should add a search index for a single column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.searchIndex('text')),
            })),
          () =>
            expectSql(`
              CREATE INDEX "table_text_idx" ON "table" USING gin (to_tsvector('english', "text"))
            `),
          () =>
            expectSql(`
              DROP INDEX "table_text_idx"
            `),
        );
      });

      it('should handle an index for search with english by default', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.searchIndex(['title', 'text'])),
            })),
          () =>
            expectSql(`
              CREATE INDEX "table_title_text_idx" ON "table" USING gin (to_tsvector('english', "title" || ' ' || "text"))
            `),
          () =>
            expectSql(`
              DROP INDEX "table_title_text_idx"
            `),
        );
      });

      it('should handle an index for search with a custom default language', async () => {
        db.options.language = 'Ukrainian';

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.searchIndex(['title', 'text'])),
            })),
          () =>
            expectSql(`
              CREATE INDEX "table_title_text_idx" ON "table" USING gin (to_tsvector('Ukrainian', "title" || ' ' || "text"))
            `),
          () =>
            expectSql(`
              DROP INDEX "table_title_text_idx"
            `),
        );
      });

      it('should support an index for search with a custom default language set in the table options', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', { language: 'Ukrainian' }, (t) => ({
              ...t[action](t.searchIndex(['title', 'text'])),
            })),
          () =>
            expectSql(`
              CREATE INDEX "table_title_text_idx" ON "table" USING gin (to_tsvector('Ukrainian', "title" || ' ' || "text"))
            `),
          () =>
            expectSql(`
              DROP INDEX "table_title_text_idx"
            `),
        );
      });

      it('should support an index for search with a custom default language set in the index options', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.searchIndex(['title', 'text'], { language: 'Ukrainian' }),
              ),
            })),
          () =>
            expectSql(`
              CREATE INDEX "table_title_text_idx" ON "table" USING gin (to_tsvector('Ukrainian', "title" || ' ' || "text"))
            `),
          () =>
            expectSql(`
              DROP INDEX "table_title_text_idx"
            `),
        );
      });

      it('should use a language from a column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.searchIndex(['title', 'text'], { languageColumn: 'lang' }),
              ),
            })),
          () =>
            expectSql(`
              CREATE INDEX "table_title_text_idx" ON "table" USING gin (to_tsvector("lang", "title" || ' ' || "text"))
            `),
          () =>
            expectSql(`
              DROP INDEX "table_title_text_idx"
            `),
        );
      });

      it('should set weights on columns', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.searchIndex([
                  { column: 'title', weight: 'A' },
                  { column: 'text', weight: 'B' },
                ]),
              ),
            })),
          () =>
            expectSql(
              toLine(`
                CREATE INDEX "table_title_text_idx" ON "table" USING gin
                  ((setweight(to_tsvector('english', coalesce("title", '')), 'A') ||
                   setweight(to_tsvector('english', coalesce("text", '')), 'B')))
              `),
            ),
          () =>
            expectSql(`
              DROP INDEX "table_title_text_idx"
            `),
        );
      });

      it('should index a generated column', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              generated: t[action](
                t.tsvector().generated(['title', 'text']).searchIndex(),
              ),
            })),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                ADD COLUMN "generated" tsvector GENERATED ALWAYS AS (to_tsvector('english', coalesce("title", '') || ' ' || coalesce("text", ''))) STORED NOT NULL
              `,
              `
                CREATE INDEX "table_generated_idx" ON "table" USING GIN ("generated")
              `,
            ]),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                DROP COLUMN "generated"
              `,
            ]),
        );
      });

      it('should index a generated column with weights', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              generated: t[action](
                t.tsvector().generated({ title: 'A', text: 'B' }).searchIndex(),
              ),
            })),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                ADD COLUMN "generated" tsvector GENERATED ALWAYS AS ((setweight(to_tsvector('english', coalesce("title", '')), 'A') || setweight(to_tsvector('english', coalesce("text", '')), 'B'))) STORED NOT NULL
              `,
              `
                CREATE INDEX "table_generated_idx" ON "table" USING GIN ("generated")
              `,
            ]),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                DROP COLUMN "generated"
              `,
            ]),
        );
      });

      it('should index a generated column with a configured default language', async () => {
        db.options.language = 'Ukrainian';

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              generated: t[action](
                t.tsvector().generated(['title', 'text']).searchIndex(),
              ),
            })),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                ADD COLUMN "generated" tsvector GENERATED ALWAYS AS (to_tsvector('Ukrainian', coalesce("title", '') || ' ' || coalesce("text", ''))) STORED NOT NULL
              `,
              `
                CREATE INDEX "table_generated_idx" ON "table" USING GIN ("generated")
              `,
            ]),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                DROP COLUMN "generated"
              `,
            ]),
        );
      });

      it('should index a generated column with a custom default language', async () => {
        db.options.language = 'Ukrainian';

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              generated: t[action](
                t
                  .tsvector()
                  .generated('Ukrainian', ['title', 'text'])
                  .searchIndex(),
              ),
            })),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                ADD COLUMN "generated" tsvector GENERATED ALWAYS AS (to_tsvector('Ukrainian', coalesce("title", '') || ' ' || coalesce("text", ''))) STORED NOT NULL
              `,
              `
                CREATE INDEX "table_generated_idx" ON "table" USING GIN ("generated")
              `,
            ]),
          () =>
            expectSql([
              `
                ALTER TABLE "table"
                DROP COLUMN "generated"
              `,
            ]),
        );
      });
    });

    describe('foreign key', () => {
      it('should handle composite foreign key', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.foreignKey(
                  ['id', 'name'],
                  'otherTable',
                  ['foreignId', 'foreignName'],
                  {
                    name: 'constraintName',
                    match: 'FULL',
                    onUpdate: 'CASCADE',
                    onDelete: 'CASCADE',
                    dropMode: 'CASCADE',
                  },
                ),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ${toLine(`
                ADD CONSTRAINT "constraintName"
                  FOREIGN KEY ("id", "name")
                  REFERENCES "otherTable"("foreignId", "foreignName")
                  MATCH FULL
                  ON DELETE CASCADE
                  ON UPDATE CASCADE
              `)}
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "constraintName" CASCADE
            `),
        );
      });

      it('should handle composite foreign key in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.foreignKey(['idColumn', 'nameColumn'], 'otherTable', [
                  'foreignId',
                  'foreignName',
                ]),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ${toLine(`
                ADD CONSTRAINT "table_id_column_name_column_fkey"
                  FOREIGN KEY ("id_column", "name_column")
                  REFERENCES "otherTable"("foreign_id", "foreign_name")
              `)}
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_id_column_name_column_fkey"
            `),
        );
      });
    });

    describe('check', () => {
      it('should handle column with check', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              column: t[action](t.text().check(t.sql(`length(column) > 10`))),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD COLUMN "column" text NOT NULL CHECK (length(column) > 10)
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP COLUMN "column"
            `),
        );
      });

      it('should handle table check', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](t.check(t.sql('sql'))),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD CONSTRAINT "table_check" CHECK (sql)
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_check"
            `),
        );
      });
    });

    describe('constraint', () => {
      it('should handle constraint', async () => {
        await testUpAndDown(
          (action) =>
            db.changeTable('table', (t) => ({
              ...t[action](
                t.constraint({
                  name: 'constraintName',
                  dropMode: 'CASCADE',
                  references: [
                    ['id'],
                    'otherTable',
                    ['otherId'],
                    {
                      match: 'FULL',
                      onUpdate: 'CASCADE',
                      onDelete: 'CASCADE',
                    },
                  ],
                  check: t.sql('check'),
                }),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ${toLine(`
                ADD CONSTRAINT "constraintName"
                  FOREIGN KEY ("id")
                  REFERENCES "otherTable"("otherId")
                  MATCH FULL
                  ON DELETE CASCADE
                  ON UPDATE CASCADE
                  CHECK (check)
              `)}
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "constraintName" CASCADE
            `),
        );
      });
    });
  });

  describe('change', () => {
    describe('type', () => {
      it('should change column type', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeType: t.change(t.integer(), t.text()),
              changeDomainType: t.change(t.domain('one'), t.domain('two')),
              changeCustomType: t.change(t.type('one'), t.type('two')),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "changeType" TYPE text,
                ALTER COLUMN "changeDomainType" TYPE "two",
                ALTER COLUMN "changeCustomType" TYPE "two"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "changeType" TYPE int4,
                ALTER COLUMN "changeDomainType" TYPE "one",
                ALTER COLUMN "changeCustomType" TYPE "one"
            `),
        );
      });

      it('should change column type with custom name', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              name: t.name('name').change(t.integer(), t.text()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "name" TYPE text
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "name" TYPE int4
            `),
        );
      });

      it('should change column type with custom name in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeType: t.change(t.integer(), t.text()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "change_type" TYPE text
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "change_type" TYPE int4
            `),
        );
      });

      it('should change column type using', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeTypeUsing: t.change(t.integer(), t.text(), {
                usingUp: t.sql`b::text`,
                usingDown: t.sql`b::int`,
              }),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "changeTypeUsing" TYPE text USING b::text
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ALTER COLUMN "changeTypeUsing" TYPE int4 USING b::int
            `),
        );
      });
    });

    it('should add identity to a column', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            id: t.change(t.integer(), t.identity()),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "id" DROP IDENTITY
          `),
      );
    });

    it('should change identity properties', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            id: t.change(
              t.identity(),
              t.identity({
                increment: 2,
                start: 3,
                min: 4,
                max: 5,
                cache: 6,
                cycle: true,
              }),
            ),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "id" DROP IDENTITY,
              ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 2 MINVALUE 4 MAXVALUE 5 START WITH 3 CACHE 6 CYCLE)
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "id" DROP IDENTITY,
              ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY
          `),
      );
    });

    it('should change enum column', async () => {
      const enumOne = ['one', 'two'];
      const enumTwo = ['three', 'four'];

      asMock(queryMock).mockResolvedValueOnce({
        rows: enumOne.map((value) => [value]),
      });
      asMock(queryMock).mockResolvedValueOnce({
        rows: enumTwo.map((value) => [value]),
      });

      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeEnum: t.change(t.enum('one'), t.enum('two')),
          })),
        () => {
          expectSql([
            'SELECT unnest(enum_range(NULL::"one"))::text',
            'SELECT unnest(enum_range(NULL::"two"))::text',
            `
            ALTER TABLE "table"
              ALTER COLUMN "changeEnum" TYPE "two" USING "changeEnum"::text::"two"
          `,
          ]);

          asMock(queryMock).mockResolvedValueOnce({
            rows: enumTwo.map((value) => [value]),
          });
          asMock(queryMock).mockResolvedValueOnce({
            rows: enumOne.map((value) => [value]),
          });
        },
        () => {
          expectSql([
            'SELECT unnest(enum_range(NULL::"two"))::text',
            'SELECT unnest(enum_range(NULL::"one"))::text',
            `
            ALTER TABLE "table"
              ALTER COLUMN "changeEnum" TYPE "one" USING "changeEnum"::text::"one"
          `,
          ]);
        },
      );
    });

    describe('check', () => {
      it('should change column check', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              column: t.change(
                t.text().check(t.sql`length(column) < 20`),
                t.text().check(t.sql`length(column) > 10`),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_column_check",
                ADD CONSTRAINT "table_column_check"
                CHECK (length(column) > 10)
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_column_check",
                ADD CONSTRAINT "table_column_check"
                CHECK (length(column) < 20)
            `),
        );
      });
    });

    it('should change column collate', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeCollate: t.change(
              t.text().collate('one.two'),
              t.text().collate('three.four'),
            ),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeCollate" TYPE text COLLATE "three"."four"
        `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeCollate" TYPE text COLLATE "one"."two"
        `),
      );
    });

    describe('change default', () => {
      it('should change column default', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeDefault: t.change(
                t.default('from'),
                t.default(t.sql("'to'")),
              ),
              changeJsonDefault: t.change(
                t.json().default(null),
                t.json().default([]),
              ),
            })),
          () =>
            expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeDefault" SET DEFAULT 'to',
              ALTER COLUMN "changeJsonDefault" SET DEFAULT '[]'
          `),
          () =>
            expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeDefault" SET DEFAULT 'from',
              ALTER COLUMN "changeJsonDefault" DROP DEFAULT
          `),
        );
      });

      it('should change column default with custom name', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeDefault: t
                .name('name')
                .change(t.default('from'), t.default(t.sql("'to'"))),
            })),
          () =>
            expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "name" SET DEFAULT 'to'
          `),
          () =>
            expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "name" SET DEFAULT 'from'
          `),
        );
      });

      it('should change column default in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeDefault: t.change(
                t.default('from'),
                t.default(t.sql("'to'")),
              ),
            })),
          () =>
            expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "change_default" SET DEFAULT 'to'
          `),
          () =>
            expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "change_default" SET DEFAULT 'from'
          `),
        );
      });

      it('should drop column default when changing column type before setting new default', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              column: t.change(
                t.string().default('default'),
                t.integer().default(123),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ALTER COLUMN "column" TYPE int4,
              ALTER COLUMN "column" DROP DEFAULT,
              ALTER COLUMN "column" SET DEFAULT 123
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ALTER COLUMN "column" TYPE varchar(255),
              ALTER COLUMN "column" DROP DEFAULT,
              ALTER COLUMN "column" SET DEFAULT 'default'
            `),
        );
      });
    });

    it('should change column null', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeNull: t.change(t.nonNullable(), t.nullable()),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeNull" DROP NOT NULL
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeNull" SET NOT NULL
          `),
      );
    });

    it('should change column null with custom column name', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeNull: t.name('name').change(t.nonNullable(), t.nullable()),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "name" DROP NOT NULL
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "name" SET NOT NULL
          `),
      );
    });

    it('should change column null in snakeCase mode', async () => {
      db.options.snakeCase = true;

      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeNull: t.change(t.nonNullable(), t.nullable()),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "change_null" DROP NOT NULL
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "change_null" SET NOT NULL
          `),
      );
    });

    it('should change column comment', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeComment: t.change(
              t.comment('comment 1'),
              t.comment('comment 2'),
            ),
          })),
        () =>
          expectSql(`
            COMMENT ON COLUMN "table"."changeComment" IS 'comment 2'
          `),
        () =>
          expectSql(`
            COMMENT ON COLUMN "table"."changeComment" IS 'comment 1'
          `),
      );
    });

    it('should change column comment in snakeCase mode', async () => {
      db.options.snakeCase = true;

      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeComment: t.change(
              t.comment('comment 1'),
              t.comment('comment 2'),
            ),
          })),
        () =>
          expectSql(`
            COMMENT ON COLUMN "table"."change_comment" IS 'comment 2'
          `),
        () =>
          expectSql(`
            COMMENT ON COLUMN "table"."change_comment" IS 'comment 1'
          `),
      );
    });

    it('should change column compression', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeCompression: t.change(
              t.text(),
              t.text().compression('value'),
            ),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeCompression" SET COMPRESSION value
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "changeCompression" SET COMPRESSION DEFAULT
          `),
      );
    });

    it('should change column compression with custom name', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            name: t
              .name('name')
              .change(t.text(), t.text().compression('value')),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "name" SET COMPRESSION value
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "name" SET COMPRESSION DEFAULT
          `),
      );
    });

    it('should change column compression in snakeCase mode', async () => {
      db.options.snakeCase = true;

      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            changeCompression: t.change(
              t.text(),
              t.text().compression('value'),
            ),
          })),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "change_compression" SET COMPRESSION value
          `),
        () =>
          expectSql(`
            ALTER TABLE "table"
              ALTER COLUMN "change_compression" SET COMPRESSION DEFAULT
          `),
      );
    });

    it('should rename column and change it`s type', async () => {
      await testUpAndDown(
        () =>
          db.changeTable('table', (t) => ({
            from: t.change(t.string(), t.name('to').text()),
          })),
        () =>
          expectSql([
            `
              ALTER TABLE "table"
              RENAME COLUMN "from" TO "to"
            `,
            `
              ALTER TABLE "table"
              ALTER COLUMN "to" TYPE text
            `,
          ]),
        () =>
          expectSql([
            `
              ALTER TABLE "table"
              RENAME COLUMN "to" TO "from"
            `,
            `
              ALTER TABLE "table"
              ALTER COLUMN "from" TYPE varchar(255)
            `,
          ]),
      );
    });

    describe('composite primary key', () => {
      it('should add composite primary key via change', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              id: t.change(t.integer(), t.integer().primaryKey()),
              text: t.change(t.integer(), t.integer().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD PRIMARY KEY ("id", "text")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey"
            `),
        );
      });

      it('should add composite primary key via change in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              idColumn: t.change(t.integer(), t.integer().primaryKey()),
              textColumn: t.change(t.integer(), t.integer().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD PRIMARY KEY ("id_column", "text_column")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey"
            `),
        );
      });

      it('should drop composite primary key via change', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              id: t.change(t.integer().primaryKey(), t.integer()),
              text: t.change(t.integer().primaryKey(), t.integer()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD PRIMARY KEY ("id", "text")
            `),
        );
      });

      it('should drop composite primary key via change in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              idColumn: t.change(t.integer().primaryKey(), t.integer()),
              textColumn: t.change(t.integer().primaryKey(), t.integer()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              ADD PRIMARY KEY ("id_column", "text_column")
            `),
        );
      });

      it('should change composite primary key', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              id: t.change(t.integer().primaryKey(), t.integer()),
              text: t.change(
                t.integer().primaryKey(),
                t.integer().primaryKey(),
              ),
              active: t.change(t.integer(), t.integer().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey",
              ADD PRIMARY KEY ("text", "active")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey",
              ADD PRIMARY KEY ("id", "text")
            `),
        );
      });

      it('should change composite primary key in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              id: t.change(t.integer().primaryKey(), t.integer()),
              text: t.change(
                t.integer().primaryKey(),
                t.integer().primaryKey(),
              ),
              active: t.change(t.integer(), t.integer().primaryKey()),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey",
              ADD PRIMARY KEY ("text", "active")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              DROP CONSTRAINT "table_pkey",
              ADD PRIMARY KEY ("id", "text")
            `),
        );
      });
    });

    describe('foreign key', () => {
      it('should add foreign key', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              addFkey: t.change(
                t.integer(),
                t.integer().foreignKey('otherTable', 'foreignId'),
              ),
              addFkeyWithOptions: t.change(
                t.integer(),
                t.integer().foreignKey('otherTable', 'foreignId', {
                  name: 'foreignKeyName',
                  match: 'FULL',
                  onUpdate: 'SET NULL',
                  onDelete: 'CASCADE',
                }),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD CONSTRAINT "table_addFkey_fkey" FOREIGN KEY ("addFkey") REFERENCES "otherTable"("foreignId"),
                ADD CONSTRAINT "foreignKeyName" FOREIGN KEY ("addFkeyWithOptions") REFERENCES "otherTable"("foreignId") MATCH FULL ON DELETE CASCADE ON UPDATE SET NULL
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_addFkey_fkey",
                DROP CONSTRAINT "foreignKeyName"
            `),
        );
      });

      it('should add foreign key in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              addFkey: t.change(
                t.integer(),
                t.integer().foreignKey('otherTable', 'foreignId'),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD CONSTRAINT "table_add_fkey_fkey" FOREIGN KEY ("add_fkey") REFERENCES "otherTable"("foreign_id")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_add_fkey_fkey"
            `),
        );
      });

      it('should remove foreign key', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              removeFkey: t.change(
                t.integer().foreignKey('otherTable', 'foreignId'),
                t.integer(),
              ),
              removeFkeyWithOptions: t.change(
                t.integer().foreignKey('otherTable', 'foreignId', {
                  name: 'foreignKeyName',
                  match: 'FULL',
                  onUpdate: 'SET NULL',
                  onDelete: 'CASCADE',
                }),
                t.integer(),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_removeFkey_fkey",
                DROP CONSTRAINT "foreignKeyName"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD CONSTRAINT "table_removeFkey_fkey" FOREIGN KEY ("removeFkey") REFERENCES "otherTable"("foreignId"),
                ADD CONSTRAINT "foreignKeyName" FOREIGN KEY ("removeFkeyWithOptions") REFERENCES "otherTable"("foreignId") MATCH FULL ON DELETE CASCADE ON UPDATE SET NULL
            `),
        );
      });

      it('should remove foreign key in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              removeFkey: t.change(
                t.integer().foreignKey('otherTable', 'foreignId'),
                t.integer(),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_remove_fkey_fkey"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                ADD CONSTRAINT "table_remove_fkey_fkey" FOREIGN KEY ("remove_fkey") REFERENCES "otherTable"("foreign_id")
            `),
        );
      });

      it('should change foreign key', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeForeignKey: t.change(
                t.integer().foreignKey('a', 'aId', {
                  name: 'fromFkeyName',
                  match: 'PARTIAL',
                  onUpdate: 'RESTRICT',
                  onDelete: 'SET DEFAULT',
                }),
                t.integer().foreignKey('b', 'bId', {
                  name: 'toFkeyName',
                  match: 'FULL',
                  onUpdate: 'NO ACTION',
                  onDelete: 'CASCADE',
                }),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "fromFkeyName",
                ADD CONSTRAINT "toFkeyName" FOREIGN KEY ("changeForeignKey") REFERENCES "b"("bId") MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "toFkeyName",
                ADD CONSTRAINT "fromFkeyName" FOREIGN KEY ("changeForeignKey") REFERENCES "a"("aId") MATCH PARTIAL ON DELETE SET DEFAULT ON UPDATE RESTRICT
            `),
        );
      });

      it('should change foreign key in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeForeignKey: t.change(
                t.integer().foreignKey('a', 'aId'),
                t.integer().foreignKey('b', 'bId'),
              ),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_change_foreign_key_fkey",
                ADD CONSTRAINT "table_change_foreign_key_fkey" FOREIGN KEY ("change_foreign_key") REFERENCES "b"("b_id")
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
                DROP CONSTRAINT "table_change_foreign_key_fkey",
                ADD CONSTRAINT "table_change_foreign_key_fkey" FOREIGN KEY ("change_foreign_key") REFERENCES "a"("a_id")
            `),
        );
      });
    });

    describe('index', () => {
      it('should add index', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              addIndex: t.change(t.integer(), t.integer().index()),
              addIndexWithOptions: t.change(
                t.integer(),
                t.integer().index({
                  collate: 'schema.collation',
                  opclass: 'opclass',
                  order: 'order',
                  unique: true,
                  nullsNotDistinct: true,
                  using: 'using',
                  include: ['a', 'b'],
                  with: 'with',
                  tablespace: 'tablespace',
                  where: 'where',
                  dropMode: 'CASCADE',
                }),
              ),
            })),
          () =>
            expectSql([
              `CREATE INDEX "table_addIndex_idx" ON "table" ("addIndex")`,
              toLine(`
                CREATE UNIQUE INDEX "table_addIndexWithOptions_idx"
                  ON "table"
                  USING using ("addIndexWithOptions" COLLATE "schema"."collation" opclass order)
                  INCLUDE ("a", "b")
                  NULLS NOT DISTINCT
                  WITH (with)
                  TABLESPACE tablespace
                  WHERE where
              `),
            ]),
          () =>
            expectSql([
              `DROP INDEX "table_addIndex_idx"`,
              `DROP INDEX "table_addIndexWithOptions_idx" CASCADE`,
            ]),
        );
      });

      it('should add index in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              addIndex: t.change(t.integer(), t.integer().index()),
            })),
          () =>
            expectSql([
              `CREATE INDEX "table_add_index_idx" ON "table" ("add_index")`,
            ]),
          () => expectSql([`DROP INDEX "table_add_index_idx"`]),
        );
      });

      it('should remove index', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              removeIndex: t.change(t.integer().index(), t.integer()),
              removeIndexWithOptions: t.change(
                t.integer().index({
                  collate: 'schema.collation',
                  opclass: 'opclass',
                  order: 'order',
                  unique: true,
                  nullsNotDistinct: true,
                  using: 'using',
                  include: ['a', 'b'],
                  with: 'with',
                  tablespace: 'tablespace',
                  where: 'where',
                  dropMode: 'CASCADE',
                }),
                t.integer(),
              ),
            })),
          () =>
            expectSql([
              `DROP INDEX "table_removeIndex_idx"`,
              `DROP INDEX "table_removeIndexWithOptions_idx" CASCADE`,
            ]),
          () =>
            expectSql([
              `CREATE INDEX "table_removeIndex_idx" ON "table" ("removeIndex")`,
              toLine(`
                CREATE UNIQUE INDEX "table_removeIndexWithOptions_idx"
                  ON "table"
                  USING using ("removeIndexWithOptions" COLLATE "schema"."collation" opclass order)
                  INCLUDE ("a", "b")
                  NULLS NOT DISTINCT
                  WITH (with)
                  TABLESPACE tablespace
                  WHERE where
              `),
            ]),
        );
      });

      it('should remove index in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              removeIndex: t.change(t.integer().index(), t.integer()),
            })),
          () => expectSql([`DROP INDEX "table_remove_index_idx"`]),
          () =>
            expectSql([
              `CREATE INDEX "table_remove_index_idx" ON "table" ("remove_index")`,
            ]),
        );
      });

      it('should change index', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeIndex: t.change(
                t.integer().index({
                  name: 'from',
                  collate: 'schema.from',
                  opclass: 'from',
                  order: 'from',
                  unique: false,
                  nullsNotDistinct: false,
                  using: 'from',
                  include: ['a', 'b'],
                  with: 'from',
                  tablespace: 'from',
                  where: 'from',
                  dropMode: 'CASCADE',
                }),
                t.integer().index({
                  name: 'to',
                  collate: 'schema.to',
                  opclass: 'to',
                  order: 'to',
                  unique: true,
                  nullsNotDistinct: true,
                  using: 'to',
                  include: ['c', 'd'],
                  with: 'to',
                  tablespace: 'to',
                  where: 'to',
                  dropMode: 'RESTRICT',
                }),
              ),
            })),
          () =>
            expectSql([
              `DROP INDEX "from" CASCADE`,
              toLine(`
                CREATE UNIQUE INDEX "to"
                  ON "table"
                  USING to ("changeIndex" COLLATE "schema"."to" to to)
                  INCLUDE ("c", "d")
                  NULLS NOT DISTINCT
                  WITH (to)
                  TABLESPACE to
                  WHERE to
              `),
            ]),
          () =>
            expectSql([
              `DROP INDEX "to" RESTRICT`,
              toLine(`
                CREATE INDEX "from"
                  ON "table"
                  USING from ("changeIndex" COLLATE "schema"."from" from from)
                  INCLUDE ("a", "b")
                  WITH (from)
                  TABLESPACE from
                  WHERE from
              `),
            ]),
        );
      });

      it('should change index in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              changeIndex: t.change(
                t.integer().index({
                  unique: false,
                }),
                t.integer().index({
                  unique: true,
                }),
              ),
            })),
          () =>
            expectSql([
              `DROP INDEX "table_change_index_idx"`,
              `CREATE UNIQUE INDEX "table_change_index_idx" ON "table" ("change_index")`,
            ]),
          () =>
            expectSql([
              `DROP INDEX "table_change_index_idx"`,
              `CREATE INDEX "table_change_index_idx" ON "table" ("change_index")`,
            ]),
        );
      });
    });

    describe('rename column', () => {
      it('should rename a column', async () => {
        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              a: t.rename('b'),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              RENAME COLUMN "a" TO "b"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              RENAME COLUMN "b" TO "a"
            `),
        );
      });

      it('should rename a column in snakeCase mode', async () => {
        db.options.snakeCase = true;

        await testUpAndDown(
          () =>
            db.changeTable('table', (t) => ({
              aColumn: t.rename('b_column'),
            })),
          () =>
            expectSql(`
              ALTER TABLE "table"
              RENAME COLUMN "a_column" TO "b_column"
            `),
          () =>
            expectSql(`
              ALTER TABLE "table"
              RENAME COLUMN "b_column" TO "a_column"
            `),
        );
      });
    });
  });
});
